import numpy as np
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import make_classification
import matplotlib.pyplot as plt


def generate_synthetic_data(n_samples=1000):
    """Generate synthetic data to simulate cat/dog image features"""
    print("Generating synthetic cat/dog image data...")

    X, y = make_classification(
        n_samples=n_samples,
        n_features=100,      # fixed: was n_feature
        n_informative=80,
        n_redundant=20,
        n_classes=2,
        class_sep=1.5,
        random_state=42
    )

    # add small noise
    X += np.random.normal(0, 0.1, X.shape)

    print(f"Generated {n_samples} samples with {X.shape[1]} features")
    print(f"Class distribution: {np.bincount(y)}")

    return X, y


def train_svm_classifier(X, y):
    """Train SVM classifier on synthetic data"""

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y
    )

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    print("\nTraining SVM classifier...")

    svm_model = SVC(kernel='rbf', C=1.0, gamma='scale', random_state=42)
    svm_model.fit(X_train_scaled, y_train)

    y_pred = svm_model.predict(X_test_scaled)

    accuracy = accuracy_score(y_test, y_pred)

    print(f"\nSVM Classification Results:")
    print(f"Accuracy: {accuracy:.4f} ({accuracy*100:.2f}%)")
    print("\nDetailed Classification Report:")
    print(classification_report(y_test, y_pred, target_names=['Cat', 'Dog']))

    return svm_model, scaler, X_test_scaled, y_test, y_pred


def compare_kernels():
    """Compare different SVM kernels"""
    X, y = generate_synthetic_data(n_samples=1000)
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42
    )
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    kernels = ['linear', 'rbf', 'poly']
    results = {}

    print("\nComparing different SVM kernels:")
    print("-" * 40)

    for kernel in kernels:
        svm = SVC(kernel=kernel, random_state=42)
        svm.fit(X_train_scaled, y_train)
        y_pred = svm.predict(X_test_scaled)
        accuracy = accuracy_score(y_test, y_pred)
        results[kernel] = accuracy
        print(f"{kernel.upper()} kernel accuracy: {accuracy:.4f} ({accuracy*100:.2f}%)")

    return results


def visualize_results(y_test, y_pred):
    """Create a simple confusion matrix visualization"""
    cm = confusion_matrix(y_test, y_pred)

    plt.figure(figsize=(8, 6))
    plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)
    plt.title('Confusion Matrix - Cat vs Dog Classification')
    plt.colorbar()

    classes = ['Cat', 'Dog']
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes)
    plt.yticks(tick_marks, classes)

    thresh = cm.max() / 2
    for i in range(cm.shape[0]):
        for j in range(cm.shape[1]):
            plt.text(j, i, format(cm[i, j], 'd'),
                     ha="center", va="center",
                     color="white" if cm[i, j] > thresh else "black")

    plt.ylabel('True Label')
    plt.xlabel('Predicted Label')
    plt.tight_layout()
    plt.show()


if __name__ == "__main__":
    print("SVM Cat vs Dog Classifier")
    print("=" * 50)

    X, y = generate_synthetic_data(n_samples=1000)
    model, scaler, X_test, y_test, y_pred = train_svm_classifier(X, y)
    kernel_results = compare_kernels()

    best_kernel = max(kernel_results, key=kernel_results.get)
    print(f"\nBest performing kernel: {best_kernel.upper()} ({kernel_results[best_kernel]:.4f})")

    print("\nGenerating confusion matrix...")
    visualize_results(y_test, y_pred)

    print("\nSVM classification complete!")
    print("Note: This uses synthetic data to simulate cat/dog image features.")
    print("In real implementation, replace with actual image preprocessing.")
